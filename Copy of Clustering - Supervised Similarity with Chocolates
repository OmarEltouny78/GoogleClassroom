{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Clustering - Supervised Similarity with Chocolates","provenance":[{"file_id":"https://github.com/google/eng-edu/blob/master/ml/clustering/clustering-supervised-similarity.ipynb","timestamp":1592216962369}],"collapsed_sections":["9EjQt_o9Xf_L","MJtuP9w5jJHq"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"9EjQt_o9Xf_L"},"source":["#### Copyright 2018 Google LLC."]},{"cell_type":"code","metadata":{"cellView":"both","colab_type":"code","id":"oXzTW-CnXf_Q","colab":{}},"source":["#@title\n","# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"9NkysjxvKAli"},"source":["# Supervised Similarity Measure\n","We'll cluster chocolates in the [Chocolate Bar Ratings](https://www.kaggle.com/rtatman/chocolate-bar-ratings) dataset using k-means with a supervised similarity measure. The dataset has ratings\n","of chocolate bars along with their cocoa percentage, bean type, bean origin,\n","maker name, and maker country. You will:\n","\n","* Load and clean the data.\n","* Process the data.\n","* Generate embeddings by training a DNN.\n","* Cluster the chocolates using k-means.\n","* Check the clustering result using quality metrics.\n","\n"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"2X92CHu-KDOi"},"source":["# 1. Load and clean data\n","Run the section below to load and clean the dataset. You do not need to understand the code. The code displays data for the first few chocolates."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"Sq-yxIzRO4R2","colab":{"base_uri":"https://localhost:8080/","height":275},"outputId":"a92af5f2-7c47-4faf-d5a3-eaf3b006d1a9","executionInfo":{"status":"ok","timestamp":1592216350621,"user_tz":-60,"elapsed":3124,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["#@title Run to load and clean the dataset\n","%reset -f\n","from __future__ import print_function\n","\n","import math\n","import numpy as np\n","import numpy.linalg as nla\n","import pandas as pd\n","import re\n","import six\n","from os.path import join\n","from matplotlib import pyplot as plt\n","\n","import tensorflow.compat.v1 as tf\n","tf.disable_v2_behavior()\n","\n","\n","# Set the output display to have one digit for decimal places and limit it to\n","# printing 15 rows.\n","pd.options.display.float_format = '{:.2f}'.format\n","pd.options.display.max_rows = 15\n","\n","choc_data = pd.read_csv(\"https://download.mlcc.google.com/mledu-datasets/flavors_of_cacao.csv\", sep=\",\", encoding='latin-1')\n","\n","# We can rename the columns.\n","choc_data.columns = ['maker', 'specific_origin', 'reference_number', 'review_date', 'cocoa_percent', 'maker_location', 'rating', 'bean_type', 'broad_origin']\n","\n","# choc_data.dtypes\n","\n","# Replace empty/null values with \"Blend\"\n","choc_data['bean_type'] = choc_data['bean_type'].fillna('Blend')\n","\n","#@title Cast bean_type to string to remove leading 'u'\n","choc_data['bean_type'] = choc_data['bean_type'].astype(str)\n","choc_data['cocoa_percent'] = choc_data['cocoa_percent'].str.strip('%')\n","choc_data['cocoa_percent'] = pd.to_numeric(choc_data['cocoa_percent'])\n","\n","#@title Correct spelling mistakes, and replace city with country name\n","choc_data['maker_location'] = choc_data['maker_location']\\\n",".str.replace('Amsterdam', 'Holland')\\\n",".str.replace('U.K.', 'England')\\\n",".str.replace('Niacragua', 'Nicaragua')\\\n",".str.replace('Domincan Republic', 'Dominican Republic')\n","\n","# Adding this so that Holland and Netherlands map to the same country.\n","choc_data['maker_location'] = choc_data['maker_location']\\\n",".str.replace('Holland', 'Netherlands')\n","\n","def cleanup_spelling_abbrev(text):\n","    replacements = [\n","        ['-', ', '], ['/ ', ', '], ['/', ', '], ['\\(', ', '], [' and', ', '], [' &', ', '], ['\\)', ''],\n","        ['Dom Rep|DR|Domin Rep|Dominican Rep,|Domincan Republic', 'Dominican Republic'],\n","        ['Mad,|Mad$', 'Madagascar, '],\n","        ['PNG', 'Papua New Guinea, '],\n","        ['Guat,|Guat$', 'Guatemala, '],\n","        ['Ven,|Ven$|Venez,|Venez$', 'Venezuela, '],\n","        ['Ecu,|Ecu$|Ecuad,|Ecuad$', 'Ecuador, '],\n","        ['Nic,|Nic$', 'Nicaragua, '],\n","        ['Cost Rica', 'Costa Rica'],\n","        ['Mex,|Mex$', 'Mexico, '],\n","        ['Jam,|Jam$', 'Jamaica, '],\n","        ['Haw,|Haw$', 'Hawaii, '],\n","        ['Gre,|Gre$', 'Grenada, '],\n","        ['Tri,|Tri$', 'Trinidad, '],\n","        ['C Am', 'Central America'],\n","        ['S America', 'South America'],\n","        [', $', ''], [',  ', ', '], [', ,', ', '], ['\\xa0', ' '],[',\\s+', ','],\n","        [' Bali', ',Bali']\n","    ]\n","    for i, j in replacements:\n","        text = re.sub(i, j, text)\n","    return text\n","\n","choc_data['specific_origin'] = choc_data['specific_origin'].str.replace('.', '').apply(cleanup_spelling_abbrev)\n","\n","#@title Cast specific_origin to string\n","choc_data['specific_origin'] = choc_data['specific_origin'].astype(str)\n","\n","#@title Replace null-valued fields with the same value as for specific_origin\n","choc_data['broad_origin'] = choc_data['broad_origin'].fillna(choc_data['specific_origin'])\n","\n","#@title Clean up spelling mistakes and deal with abbreviations\n","choc_data['broad_origin'] = choc_data['broad_origin'].str.replace('.', '').apply(cleanup_spelling_abbrev)\n","\n","# Change 'Trinitario, Criollo' to \"Criollo, Trinitario\"\n","# Check with choc_data['bean_type'].unique()\n","choc_data.loc[choc_data['bean_type'].isin(['Trinitario, Criollo']),'bean_type'] = \"Criollo, Trinitario\"\n","# Confirm with choc_data[choc_data['bean_type'].isin(['Trinitario, Criollo'])]\n","\n","# Fix chocolate maker names\n","choc_data.loc[choc_data['maker']=='Shattel','maker'] = 'Shattell'\n","choc_data['maker'] = choc_data['maker'].str.replace(u'Na\\xef\\xbf\\xbdve','Naive')\n","\n","choc_data.head()"],"execution_count":1,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/compat/v2_compat.py:96: disable_resource_variables (from tensorflow.python.ops.variable_scope) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","non-resource variables are not supported in the long term\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>maker</th>\n","      <th>specific_origin</th>\n","      <th>reference_number</th>\n","      <th>review_date</th>\n","      <th>cocoa_percent</th>\n","      <th>maker_location</th>\n","      <th>rating</th>\n","      <th>bean_type</th>\n","      <th>broad_origin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A. Morin</td>\n","      <td>Agua Grande</td>\n","      <td>1876</td>\n","      <td>2016</td>\n","      <td>63.00</td>\n","      <td>France</td>\n","      <td>3.75</td>\n","      <td>Blend</td>\n","      <td>Sao Tome</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A. Morin</td>\n","      <td>Kpime</td>\n","      <td>1676</td>\n","      <td>2015</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>2.75</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A. Morin</td>\n","      <td>Atsane</td>\n","      <td>1676</td>\n","      <td>2015</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.00</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A. Morin</td>\n","      <td>Akata</td>\n","      <td>1680</td>\n","      <td>2015</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.50</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A. Morin</td>\n","      <td>Quilla</td>\n","      <td>1704</td>\n","      <td>2015</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.50</td>\n","      <td>Blend</td>\n","      <td>Peru</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      maker specific_origin  reference_number  ...  rating  bean_type broad_origin\n","0  A. Morin     Agua Grande              1876  ...    3.75      Blend     Sao Tome\n","1  A. Morin           Kpime              1676  ...    2.75      Blend         Togo\n","2  A. Morin          Atsane              1676  ...    3.00      Blend         Togo\n","3  A. Morin           Akata              1680  ...    3.50      Blend         Togo\n","4  A. Morin          Quilla              1704  ...    3.50      Blend         Peru\n","\n","[5 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Gtw73LZKeDux"},"source":["# 2. Process Data\n","Because you're using a DNN, you do not need to manually process the data. The DNN transforms the data for us. However, if possible, you should remove features that could distort the similarity calculation. Here, the features `review_date` and `reference_number` are not correlated with similarity. That is, chocolates that are reviewed closer together in time are not more or less similar than chocolates reviewed further apart. Remove these two features by running the following code."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"BQKj_NVSecDx","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"31bd325d-d63a-49a9-df72-9f3bae1b9780","executionInfo":{"status":"ok","timestamp":1592216405911,"user_tz":-60,"elapsed":1951,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["choc_data.drop(columns=['review_date','reference_number'],inplace=True)\n","choc_data.head()"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>maker</th>\n","      <th>specific_origin</th>\n","      <th>cocoa_percent</th>\n","      <th>maker_location</th>\n","      <th>rating</th>\n","      <th>bean_type</th>\n","      <th>broad_origin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>A. Morin</td>\n","      <td>Agua Grande</td>\n","      <td>63.00</td>\n","      <td>France</td>\n","      <td>3.75</td>\n","      <td>Blend</td>\n","      <td>Sao Tome</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A. Morin</td>\n","      <td>Kpime</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>2.75</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>A. Morin</td>\n","      <td>Atsane</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.00</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>A. Morin</td>\n","      <td>Akata</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.50</td>\n","      <td>Blend</td>\n","      <td>Togo</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>A. Morin</td>\n","      <td>Quilla</td>\n","      <td>70.00</td>\n","      <td>France</td>\n","      <td>3.50</td>\n","      <td>Blend</td>\n","      <td>Peru</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      maker specific_origin  cocoa_percent  ... rating  bean_type broad_origin\n","0  A. Morin     Agua Grande          63.00  ...   3.75      Blend     Sao Tome\n","1  A. Morin           Kpime          70.00  ...   2.75      Blend         Togo\n","2  A. Morin          Atsane          70.00  ...   3.00      Blend         Togo\n","3  A. Morin           Akata          70.00  ...   3.50      Blend         Togo\n","4  A. Morin          Quilla          70.00  ...   3.50      Blend         Peru\n","\n","[5 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"UnH92sD8e1ri"},"source":["# 3. Generate Embeddings from DNN\n","\n","We're ready to generate embeddings by training the DNN on the feature data. This section draws on concepts discussed on the page [Supervised Similarity Measure](https://developers.google.com/machine-learning/clustering/similarity/supervised-similarity).\n","\n","Run the section below to set up functions to train the DNN that generates embeddings. You do not need to understand the code."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"S1IyjxoUv57M","colab":{}},"source":["#@title Functions to Build and Train a Similarity DNN Model\n","\n","class SimilarityModel(object):\n","  \"\"\"Class to build, train, and inspect a Similarity Model.\n","\n","  This class builds a deep neural network that maps a dataset of entities\n","  with heterogenous features to an embedding space.\n","  Given a dataset as a pandas dataframe, determine the model by specifying\n","  the set of features used as input and as labels to the DNN, and the\n","  size of each hidden layer. The data is mapped to the embedding space\n","  in the last hidden layer.\n","  \n","  To build an auto-encoder, make the set of output features identical to the set\n","  of input features. Alternatively, build a predictor by using a single feature\n","  as the label. When using a single feature as a label, ensure\n","  this feature is removed from the input, or add at least\n","  one hidden layer of a sufficiently low dimension such that the model cannot\n","  trivially learn the label.\n","  Caveat: The total loss being minimized is a simple sum of losses for each\n","    output label (plus the regularization). If the output feature set combines\n","    sparse and dense features, the total loss is a sum of cross-entropy soft-max\n","    losses with root mean squared error losses, potentially in different scales,\n","    which could emphasis some output labels more than others.\n","  \"\"\"\n","\n","  def __init__(self,\n","               dataframe,\n","               input_feature_names,\n","               output_feature_names,\n","               dense_feature_names,\n","               sparse_input_feature_embedding_dims,\n","               hidden_dims=[32],\n","               l2_regularization=0.0,\n","               use_bias=True,\n","               batch_size=100,\n","               inspect=False):\n","    \"\"\"Build a similarity model.\n","\n","    Args:\n","      dataframe: the pandas dataframe used to train and validate the model.\n","      input_feature_names: list of strings, names of input feature columns.\n","      output_feature_names: list of strings, names of output feature columns.\n","      dense_feature_names: list of strings, names of feature columns that are\n","        treated as dense. All other feature columns are treated as sparse.\n","      sparse_input_feature_embedding_dims: dictionary that maps feature names to\n","        ints, expressing the embedding dimension of each input feature. Any\n","        sparse feature in input_feature_names must be in this dictionary.\n","      hidden_dims: list of ints, dimensions of each hidden layer. These hidden\n","        layers are not counting the first layer which is a concatenation of the\n","        input embeddings and the dense input features. Hence, this list can be\n","        empty, in which case the outputs of the network are directly connected\n","        to the input embeddings and/or dense inputs.\n","      use_bias: bool, if true, add a bias term to each hidden layer.\n","      batch_size: int, batch size.\n","      inspect: bool, if true, add each tensor of the model to the list of\n","        tensors that are inspected.\n","    \"\"\"\n","    used_feature_names = tuple(\n","        set(input_feature_names).union(output_feature_names))\n","    sparse_feature_names = tuple(\n","        set(used_feature_names).difference(dense_feature_names))\n","    # Dictionary mapping each sparse feature column to its vocabulary.\n","    ### sparse_feature_vocabs = { 'maker': [u'A. Morin', u'AMMA', ...], ... }\n","    sparse_feature_vocabs = {\n","        sfn: sorted(list(set(choc_data[sfn].values)))\n","        for sfn in sparse_feature_names\n","    }\n","\n","    # Sparse output features are mapped to ids via tf.feature_to_id, hence\n","    # we need key-id pairs for these vocabularies.\n","    sparse_output_feature_names = (\n","        tuple(set(sparse_feature_names).intersection(output_feature_names)))\n","    keys_and_values = {}\n","    for fn in sparse_output_feature_names:\n","      keys = tf.constant(\n","          sparse_feature_vocabs[fn],\n","          dtype=tf.string,\n","          name='{}_vocab_keys'.format(fn))\n","      values = tf.range(\n","          len(sparse_feature_vocabs[fn]),\n","          dtype=tf.int64,\n","          name='{}_vocab_values'.format(fn))\n","      keys_and_values[fn] = (keys, values)\n","\n","    # Class instance data members.\n","    self._session = None\n","    self._loss = None\n","    self._metrics = {}\n","    self._embeddings = None\n","    self._vars_to_inspect = {}\n","\n","    def split_dataframe(df, holdout_fraction=0.1):\n","      \"\"\"Splits a pandas dataframe into training and test sets.\n","\n","      Args:\n","        df: the source pandas dataframe.\n","        holdout_fraction: fraction of dataframe rows to use in the test set.\n","\n","      Returns:\n","        A pair of non-overlapping pandas dataframe for training and holdout.\n","      \"\"\"\n","      test = df.sample(frac=holdout_fraction, replace=False)\n","      train = df[~df.index.isin(test.index)]\n","      return train, test\n","\n","    train_dataframe, test_dataframe = split_dataframe(dataframe)\n","\n","    def make_batch(dataframe, batch_size):\n","      \"\"\"Creates a batch of examples.\n","\n","      Args:\n","        dataframe: a panda dataframe with rows being examples and with\n","          columns being feature columns.\n","        batch_size: the batch size.\n","\n","      Returns:\n","        A dictionary of tensors, keyed by their feature names.\n","        Each tensor is of shape [batch_size]. Tensors for sparse features are of\n","        strings, while tensors for dense features are of floats.\n","      \"\"\"\n","      used_features = {ufn: dataframe[ufn] for ufn in used_feature_names}\n","      batch = (\n","          tf.data.Dataset.from_tensor_slices(used_features).shuffle(1000)\n","          .repeat().batch(batch_size).make_one_shot_iterator().get_next())\n","      if inspect:\n","        for k, v in six.iteritems(batch):\n","          self._vars_to_inspect['input_%s' % k] = v\n","      return batch\n","\n","    def generate_feature_columns(feature_names):\n","      \"\"\"Creates the list of used feature columns.\n","\n","      Args:\n","        feature_names: an iterable of strings with the names of the features for\n","          which feature columns are generated.\n","\n","      Returns:\n","        A dictionary, keyed by feature names, of _DenseColumn and\n","        _NumericColumn.\n","      \"\"\"\n","      used_sparse_feature_names = (\n","          tuple(set(sparse_feature_names).intersection(feature_names)))\n","      used_dense_feature_names = (\n","          tuple(set(dense_feature_names).intersection(feature_names)))\n","      f_columns = {}\n","      for sfn in used_sparse_feature_names:\n","        sf_column = tf.feature_column.categorical_column_with_vocabulary_list(\n","            key=sfn,\n","            vocabulary_list=sparse_feature_vocabs[sfn],\n","            num_oov_buckets=0)\n","        f_columns[sfn] = tf.feature_column.embedding_column(\n","            categorical_column=sf_column,\n","            dimension=sparse_input_feature_embedding_dims[sfn],\n","            combiner='mean',\n","            initializer=tf.truncated_normal_initializer(stddev=.1))\n","      for dfn in used_dense_feature_names:\n","        f_columns[dfn] = tf.feature_column.numeric_column(dfn)\n","      return f_columns\n","\n","    def create_tower(features, columns):\n","      \"\"\"Creates the tower mapping features to embeddings.\n","\n","      Args:\n","        features: a dictionary of tensors of shape [batch_size], keyed by\n","          feature name. Sparse features are associated to tensors of strings,\n","          while dense features are associated to tensors of floats.\n","        columns: a dictionary, keyed by feature names, of _DenseColumn and\n","          _NumericColumn.\n","\n","      Returns:\n","        A pair of elements: hidden_layer and output_layer.\n","          hidden_layer is a tensor of shape [batch_size, hidden_dims[-1]].\n","          output_layer is a dictionary keyed by the output feature names, of\n","            dictionaries {'labels': labels, 'logits': logits}.\n","            Dense output features have both labels and logits as float tensors \n","            of shape [batch_size, 1]. Sparse output features have labels as\n","            string tensors of shape [batch_size, 1] and logits as float tensors\n","            of shape [batch_size, len(sparse_feature_vocab)].\n","      \"\"\"\n","      # TODO: sanity check the arguments.\n","      # Input features.\n","      input_columns = [columns[fn] for fn in input_feature_names]\n","      hidden_layer = tf.feature_column.input_layer(features, input_columns)\n","      dense_input_feature_names = (\n","          tuple(set(dense_feature_names).intersection(input_feature_names)))\n","      input_dim = (\n","          sum(sparse_input_feature_embedding_dims.values()) +\n","          len(dense_input_feature_names))\n","      for layer_idx, layer_output_dim in enumerate(hidden_dims):\n","        w = tf.get_variable(\n","            'hidden%d_w_' % layer_idx,\n","            shape=[input_dim, layer_output_dim],\n","            initializer=tf.truncated_normal_initializer(\n","                stddev=1.0 / np.sqrt(layer_output_dim)))\n","        if inspect:\n","          self._vars_to_inspect['hidden%d_w_' % layer_idx] = w\n","        hidden_layer = tf.matmul(hidden_layer, w)  # / 10.)\n","        if inspect:\n","          self._vars_to_inspect['hidden_layer_%d' % layer_idx] = hidden_layer\n","        input_dim = layer_output_dim\n","      # Output features.\n","      output_layer = {}\n","      for ofn in output_feature_names:\n","        if ofn in sparse_feature_names:\n","          feature_dim = len(sparse_feature_vocabs[ofn])\n","        else:\n","          feature_dim = 1\n","        w = tf.get_variable(\n","            'output_w_%s' % ofn,\n","            shape=[input_dim, feature_dim],\n","            initializer=tf.truncated_normal_initializer(stddev=1.0 /\n","                                                        np.sqrt(feature_dim)))\n","        if inspect:\n","          self._vars_to_inspect['output_w_%s' % ofn] = w\n","        if use_bias:\n","          bias = tf.get_variable(\n","              'output_bias_%s' % ofn,\n","              shape=[1, feature_dim],\n","              initializer=tf.truncated_normal_initializer(stddev=1.0 /\n","                                                          np.sqrt(feature_dim)))\n","          if inspect:\n","            self._vars_to_inspect['output_bias_%s' % ofn] = bias\n","        else:\n","          bias = tf.constant(0.0, shape=[1, feature_dim])\n","        output_layer[ofn] = {\n","            'labels':\n","                features[ofn],\n","            'logits':\n","                tf.add(tf.matmul(hidden_layer, w), bias)  # w / 10.), bias)\n","        }\n","        if inspect:\n","          self._vars_to_inspect['output_labels_%s' %\n","                                ofn] = output_layer[ofn]['labels']\n","          self._vars_to_inspect['output_logits_%s' %\n","                                ofn] = output_layer[ofn]['logits']\n","      return hidden_layer, output_layer\n","\n","    def similarity_loss(top_embeddings, output_layer):\n","      \"\"\"Build the loss to be optimized.\n","\n","      Args:\n","        top_embeddings: First element returned by create_tower.\n","        output_layer: Second element returned by create_tower.\n","\n","      Returns:\n","        total_loss: A tensor of shape [1] with the total loss to be optimized.\n","        losses: A dictionary keyed by output feature names, of tensors of shape\n","          [1] with the contribution to the loss of each output feature.\n","      \"\"\"\n","      losses = {}\n","      total_loss = tf.scalar_mul(l2_regularization,\n","                                 tf.nn.l2_loss(top_embeddings))\n","      for fn, output in six.iteritems(output_layer):\n","        if fn in sparse_feature_names:\n","          losses[fn] = tf.reduce_mean(\n","              tf.nn.sparse_softmax_cross_entropy_with_logits(\n","                  logits=output['logits'],\n","                  labels=tf.feature_to_id(\n","                      output['labels'], keys_and_values=keys_and_values[fn])))\n","        else:\n","          losses[fn] = tf.sqrt(\n","              tf.reduce_mean(\n","                  tf.square(output['logits'] -\n","                            tf.cast(output['labels'], tf.float32))))\n","        total_loss += losses[fn]\n","      return total_loss, losses\n","\n","    # Body of the constructor.\n","    input_feature_columns = generate_feature_columns(input_feature_names)\n","    # Train\n","    with tf.variable_scope('model', reuse=False):\n","      train_hidden_layer, train_output_layer = create_tower(\n","          make_batch(train_dataframe, batch_size), input_feature_columns)\n","      self._train_loss, train_losses = similarity_loss(train_hidden_layer,\n","                                                       train_output_layer)\n","    # Test\n","    with tf.variable_scope('model', reuse=True):\n","      test_hidden_layer, test_output_layer = create_tower(\n","          make_batch(test_dataframe, batch_size), input_feature_columns)\n","      test_loss, test_losses = similarity_loss(test_hidden_layer,\n","                                               test_output_layer)\n","    # Whole dataframe to get final embeddings\n","    with tf.variable_scope('model', reuse=True):\n","      self._hidden_layer, _ = create_tower(\n","          make_batch(dataframe, dataframe.shape[0]), input_feature_columns)\n","    # Metrics is a dictionary of dictionaries of dictionaries.\n","    # The 3 levels are used as plots, line colors, and line styles respectively.\n","    self._metrics = {\n","        'total': {\n","            'train': {'loss': self._train_loss},\n","            'test': {'loss': test_loss}\n","        },\n","        'feature': {\n","            'train': {'%s loss' % k: v for k, v in six.iteritems(train_losses)},\n","            'test': {'%s loss' % k: v for k, v in six.iteritems(test_losses)}\n","        }\n","    }\n","\n","  def train(self,\n","            num_iterations=30,\n","            learning_rate=1.0,\n","            plot_results=True,\n","            optimizer=tf.train.GradientDescentOptimizer):\n","    \"\"\"Trains the model.\n","\n","    Args:\n","      num_iterations: int, the number of iterations to run.\n","      learning_rate: float, the optimizer learning rate.\n","      plot_results: bool, whether to plot the results at the end of training.\n","      optimizer: tf.train.Optimizer, the optimizer to be used for training.\n","    \"\"\"\n","    with self._train_loss.graph.as_default():\n","      opt = optimizer(learning_rate)\n","      train_op = opt.minimize(self._train_loss)\n","      opt_init_op = tf.variables_initializer(opt.variables())\n","      if self._session is None:\n","        self._session = tf.Session()\n","        with self._session.as_default():\n","          self._session.run(tf.global_variables_initializer())\n","          self._session.run(tf.local_variables_initializer())\n","          self._session.run(tf.tables_initializer())\n","          tf.train.start_queue_runners()\n","\n","    with self._session.as_default():\n","      self._session.run(opt_init_op)\n","      if plot_results:  \n","        iterations = []\n","        metrics_vals = {k0: {k1: {k2: []\n","                                  for k2 in v1}\n","                             for k1, v1 in six.iteritems(v0)}\n","                        for k0, v0 in six.iteritems(self._metrics)}\n","\n","      # Train and append results.\n","      for i in range(num_iterations + 1):\n","        _, results = self._session.run((train_op, self._metrics))\n","\n","        # Printing the 1 liner with losses.\n","        if (i % 10 == 0) or i == num_iterations:\n","          print('\\riteration%6d,   ' % i + ',   '.join(\n","              ['%s %s %s: %7.3f' % (k0, k1, k2, v2)\n","               for k0, v0 in six.iteritems(results)\n","               for k1, v1 in six.iteritems(v0)\n","               for k2, v2 in six.iteritems(v1)])\n","                , end=\" \"\n","               )\n","          if plot_results:\n","            iterations.append(i)\n","            for k0, v0 in six.iteritems(results):\n","              for k1, v1 in six.iteritems(v0):\n","                for k2, v2 in six.iteritems(v1):\n","                  metrics_vals[k0][k1][k2].append(results[k0][k1][k2])\n","\n","      # Feedforward the entire dataframe to get all the embeddings.\n","      self._embeddings = self._session.run(self._hidden_layer)\n","\n","      # Plot the losses and embeddings.\n","      if plot_results:\n","        num_subplots = len(metrics_vals) + 1\n","        colors = 10 * ('red', 'blue', 'black', 'green')\n","        styles = 10 * ('-', '--', '-.', ':')\n","        # Plot the metrics.\n","        fig = plt.figure()\n","        fig.set_size_inches(num_subplots*10, 8)\n","        for i0, (k0, v0) in enumerate(six.iteritems(metrics_vals)):\n","          ax = fig.add_subplot(1, num_subplots, i0+1)\n","          ax.set_title(k0)\n","          for i1, (k1, v1) in enumerate(six.iteritems(v0)):\n","            for i2, (k2, v2) in enumerate(six.iteritems(v1)):\n","              ax.plot(iterations, v2, label='%s %s' % (k1, k2),\n","                      color=colors[i1], linestyle=styles[i2])\n","          ax.set_xlim([1, num_iterations])\n","          ax.set_yscale('log')\n","          ax.legend()\n","        # Plot the embeddings (first 3 dimensions).\n","        ax.legend(loc='upper right')\n","        ax = fig.add_subplot(1, num_subplots, num_subplots)\n","        ax.scatter(\n","            self._embeddings[:, 0], self._embeddings[:, 1],\n","            alpha=0.5, marker='o')\n","        ax.set_title('embeddings')\n","\n","\n","  @property\n","  def embeddings(self):\n","    return self._embeddings"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Anh93kGFUFEt"},"source":["The next cell trains the DNN. You can choose either a predictor DNN or an autoencoder DNN by specifying the parameter `output_feature_names` as follows:\n","\n","* If choosing a predictor DNN, specify one feature, for example, [`rating`].\n","* If choosing an autoencoder DNN, specify all features as follows: `['maker','maker_location','broad_origin','cocoa_percent','bean_type','rating']`.\n","\n","You do not need to change the other parameters, but if you're curious:\n","* `l2_regularization`: Controls the weight for L2 regularization.\n","* `hidden_dims`: Controls the dimensions of the hidden layers.\n","\n","Running the next cell generates the following plots:\n","\n","* '*total*': Total loss across all features.\n","* '*feature*': Loss for the specified output features.\n","* '*embeddings*': First two dimensions of the generated embeddings."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"7vcluIucw0BG","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"fb9a968b-46e8-4786-ddaf-1863d6cc189d","executionInfo":{"status":"ok","timestamp":1592216420539,"user_tz":-60,"elapsed":6729,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["#@title Training a DNN Similarity Model\n","\n","# Define some constants related to this dataset.\n","sparse_feature_names = ('maker', 'maker_location', 'broad_origin',\n","                        'specific_origin', 'bean_type')\n","dense_feature_names = ('reference_number', 'review_date', 'cocoa_percent',\n","                       'rating')\n","\n","# Set of features used as input to the similarity model.\n","input_feature_names = ('maker', 'maker_location', 'broad_origin',\n","                       'cocoa_percent', 'bean_type','rating', )\n","# Set of features used as output to the similarity model.\n","output_feature_names = ['rating']  #@param\n","\n","# As a rule of thumb, a reasonable choice for the embedding dimension of a\n","# sparse feature column is the log2 of the cardinality of its vocabulary.\n","# sparse_input_feature_embedding_dims = { 'maker': 9, 'maker_location': 6, ... }\n","default_embedding_dims = {\n","    sfn: int(round(math.log(choc_data[sfn].nunique()) / math.log(2)))\n","    for sfn in set(sparse_feature_names).intersection(input_feature_names)\n","}\n","# Dictionary mapping each sparse input feature to the dimension of its embedding\n","# space.\n","sparse_input_feature_embedding_dims = default_embedding_dims  # can be a param\n","\n","# Weight of the L2 regularization applied to the top embedding layer.\n","l2_regularization = 10  #@param\n","# List of dimensions of the hidden layers of the deep neural network.\n","hidden_dims = [20, 10]  #@param\n","\n","print('------ build model')\n","with tf.Graph().as_default():\n","  similarity_model = SimilarityModel(\n","      choc_data,\n","      input_feature_names=input_feature_names,\n","      output_feature_names=output_feature_names,\n","      dense_feature_names=dense_feature_names,\n","      sparse_input_feature_embedding_dims=sparse_input_feature_embedding_dims,\n","      hidden_dims=hidden_dims,\n","      l2_regularization=l2_regularization,\n","      batch_size=100,\n","      use_bias=True,\n","      inspect=True)\n","\n","print('------ train model')\n","similarity_model.train(\n","    num_iterations=1000,\n","    learning_rate=0.1,\n","    optimizer=tf.train.AdagradOptimizer)\n","print('\\n')\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["------ build model\n","WARNING:tensorflow:From <ipython-input-3-d48af23e17fb>:124: DatasetV1.make_one_shot_iterator (from tensorflow.python.data.ops.dataset_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use `for ... in dataset:` to iterate over a dataset. If using `tf.estimator`, return the `Dataset` object directly from your input function. As a last resort, you can use `tf.compat.v1.data.make_one_shot_iterator(dataset)`.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:206: EmbeddingColumn._get_dense_tensor (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:3295: VocabularyListCategoricalColumn._get_sparse_tensors (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:2167: VocabularyListCategoricalColumn._transform_feature (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column_v2.py:3235: VocabularyListCategoricalColumn._num_buckets (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:207: EmbeddingColumn._variable_shape (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:206: NumericColumn._get_dense_tensor (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:2167: NumericColumn._transform_feature (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/feature_column/feature_column.py:207: NumericColumn._variable_shape (from tensorflow.python.feature_column.feature_column_v2) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","The old _FeatureColumn APIs are being deprecated. Please use the new FeatureColumn APIs instead.\n","------ train model\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/training/adagrad.py:77: calling Constant.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n","WARNING:tensorflow:From <ipython-input-3-d48af23e17fb>:322: start_queue_runners (from tensorflow.python.training.queue_runner_impl) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","To construct input pipelines, use the `tf.data` module.\n","WARNING:tensorflow:`tf.train.start_queue_runners()` was called when no queue runners were defined. You can safely remove the call to this deprecated function.\n","iteration  1000,   total train loss:  61.460,   total test loss: 154.642,   feature train rating loss:   0.472,   feature test rating loss:   0.486 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 2160x576 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ImOGD5GJ8Ia7"},"source":["# 4. Cluster Chocolate Dataset\n","We're ready to cluster the chocolates! Run the code to set up the k-means clustering functions. You do not need to understand the code.\n","\n","**Note**: If you're following the Clustering self study, then before running the rest of this Colab, read the sections on [k-means](https://developers.google.com/machine-learning/clustering/algorithm/run-algorithm) and [quality metrics](https://developers.google.com/machine-learning/clustering/interpret)."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"eExms-TP8Hn6","colab":{}},"source":["#@title Run cell to set up functions\n","def dfSimilarity(df,centroids):\n","  ### dfSimilarity = Calculate similarities for dataframe input\n","  ### We need to calculate ||a-b||^2 = |a|^2 + |b|^2 - 2*|a|*|b|\n","  ### Implement this with matrix operations\n","  ### See the Appendix for further explanation\n","  numPoints = len(df.index)\n","  numCentroids = len(centroids.index)\n","  ## Strictly speaking, we don't need to calculate the norm of points\n","  # because it adds a constant bias to distances\n","  # But calculating it so that the similarity doesn't go negative\n","  # And that we expect similarities in [0,1] which aids debugging\n","  pointNorms = np.square(nla.norm(df,axis=1))\n","  pointNorms = np.reshape(pointNorms,[numPoints,1])\n","  ## Calculate the norm of centroids\n","  centroidNorms = np.square(nla.norm(centroids,axis=1))\n","  centroidNorms = np.reshape(centroidNorms,(1,numCentroids))\n","  ## Calculate |a|^2 + |b|^2 - 2*|a|*|b|\n","  similarities = pointNorms + centroidNorms - 2.0*np.dot(df,np.transpose(centroids))\n","  # Divide by the number of features\n","  # Which is 10 because the one-hot encoding means the \"Maker\" and \"Bean\" are\n","  # weighted twice\n","  similarities = similarities/10.0\n","  # numerical artifacts lead to negligible but negative values that go to NaN on the root\n","  similarities = similarities.clip(min=0.0)\n","  # Square root since it's ||a-b||^2\n","  similarities = np.sqrt(similarities)\n","  return similarities\n","\n","def initCentroids(df,k,feature_cols):\n","  # Pick 'k' examples are random to serve as initial centroids\n","  limit = len(df.index)\n","  centroids_key = np.random.randint(0,limit-1,k)\n","  centroids = df.loc[centroids_key,feature_cols].copy(deep=True)\n","  # the indexes get copied over so reset them\n","  centroids.reset_index(drop=True,inplace=True)\n","  return centroids\n","\n","def pt2centroid(df,centroids,feature_cols):\n","  ### Calculate similarities between all points and centroids\n","  ### And assign points to the closest centroid + save that distance\n","  numCentroids = len(centroids.index)\n","  numExamples = len(df.index)\n","  # dfSimilarity = Calculate similarities for dataframe input\n","  dist = dfSimilarity(df.loc[:,feature_cols],centroids.loc[:,feature_cols])\n","  df.loc[:,'centroid'] = np.argmin(dist,axis=1) # closest centroid\n","  df.loc[:,'pt2centroid'] = np.min(dist,axis=1) # minimum distance\n","  return df\n","\n","def recomputeCentroids(df,centroids,feature_cols):\n","  ### For every centroid, recompute it as an average of the points\n","  ### assigned to it\n","  numCentroids = len(centroids.index)\n","  for cen in range(numCentroids):\n","    dfSubset = df.loc[df['centroid'] == cen, feature_cols] # all points for centroid\n","    if not(dfSubset.empty): # if there are points assigned to the centroid\n","      clusterAvg = np.sum(dfSubset)/len(dfSubset.index)\n","      centroids.loc[cen] = clusterAvg\n","  return centroids\n","\n","def kmeans(df,k,feature_cols,verbose):\n","  flagConvergence = False\n","  maxIter = 100\n","  iter = 0                      # ensure kmeans doesn't run for ever\n","  centroids = initCentroids(df,k,feature_cols)\n","  while not(flagConvergence):\n","    iter += 1\n","    #Save old mapping of points to centroids\n","    oldMapping = df['centroid'].copy(deep=True)\n","    # Perform k-means\n","    df = pt2centroid(df,centroids,feature_cols)\n","    centroids = recomputeCentroids(df,centroids,feature_cols)\n","    # Check convergence by comparing [oldMapping, newMapping]\n","    newMapping = df['centroid']\n","    flagConvergence = all(oldMapping == newMapping)\n","    if verbose == 1:\n","      print(\"Total distance:\" + str(np.sum(df['pt2centroid'])))\n","    if (iter > maxIter):\n","      print('k-means did not converge! Reached maximum iteration limit of ' \\\n","            + str(maxIter) + '.')\n","      sys.exit()\n","      return\n","  print('k-means converged for ' + str(k) + ' clusters' + \\\n","        ' after ' + str(iter) + ' iterations!')\n","  return [df,centroids]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"-KnRLWvw1rJ9"},"source":["Run the following cell to cluster the chocolate dataset, where `k` is the number of clusters. You'll experiment with different values of `k` later. For now, use `k = 160`.\n","\n","On every iteration of k-means, the output shows how the sum of distances from all examples to their centroids reduces, such that k-means always converges. The following table shows the data for the first few chocolates. On the extreme right of the table, check the assigned centroid for each example in the `centroid` column and the distance from the example to its centroid in the `pt2centroid` column.\n","\n"]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"AKDwhN9J1PhU","colab":{"base_uri":"https://localhost:8080/","height":578},"outputId":"f7956be9-a763-4ea1-fb08-d904ce5c9e37","executionInfo":{"status":"ok","timestamp":1592216444743,"user_tz":-60,"elapsed":9553,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["k = 160 #@param\n","\n","# Extract embeddings into a dataframe\n","choc_embed = similarity_model.embeddings\n","choc_embed = pd.DataFrame(choc_embed)\n","\n","feature_cols = choc_embed.columns.values # save original columns\n","# initialize every point to an impossible value, the k+1 cluster\n","choc_embed['centroid'] = k\n","# init the point to centroid distance to an impossible value \"2\" (>1)\n","choc_embed['pt2centroid'] = 2\n","[choc_embed,centroids] = kmeans(choc_embed,k,feature_cols,1)\n","print(\"Data for the first few chocolates, with 'centroid' and 'pt2centroid' on the extreme right:\")\n","choc_embed.head()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Total distance:47.055832\n","Total distance:42.54123\n","Total distance:41.266113\n","Total distance:40.58194\n","Total distance:40.18534\n","Total distance:40.00172\n","Total distance:39.85601\n","Total distance:39.70372\n","Total distance:39.630844\n","Total distance:39.60163\n","Total distance:39.576904\n","Total distance:39.568947\n","Total distance:39.56385\n","Total distance:39.56171\n","Total distance:39.559772\n","Total distance:39.555817\n","Total distance:39.555878\n","Total distance:39.55564\n","Total distance:39.553555\n","Total distance:39.55139\n","k-means converged for 160 clusters after 20 iterations!\n","Data for the first few chocolates, with 'centroid' and 'pt2centroid' on the extreme right:\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>centroid</th>\n","      <th>pt2centroid</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-0.02</td>\n","      <td>-0.06</td>\n","      <td>-0.15</td>\n","      <td>0.05</td>\n","      <td>0.09</td>\n","      <td>0.12</td>\n","      <td>-0.06</td>\n","      <td>0.09</td>\n","      <td>-0.13</td>\n","      <td>0.18</td>\n","      <td>40</td>\n","      <td>0.01</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.00</td>\n","      <td>0.01</td>\n","      <td>-0.00</td>\n","      <td>0.01</td>\n","      <td>-0.03</td>\n","      <td>-0.00</td>\n","      <td>0.00</td>\n","      <td>-0.00</td>\n","      <td>0.02</td>\n","      <td>-0.00</td>\n","      <td>109</td>\n","      <td>0.01</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.00</td>\n","      <td>-0.01</td>\n","      <td>0.06</td>\n","      <td>0.02</td>\n","      <td>-0.07</td>\n","      <td>-0.06</td>\n","      <td>-0.00</td>\n","      <td>0.01</td>\n","      <td>-0.00</td>\n","      <td>-0.05</td>\n","      <td>132</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-0.04</td>\n","      <td>-0.07</td>\n","      <td>-0.19</td>\n","      <td>0.09</td>\n","      <td>0.11</td>\n","      <td>0.13</td>\n","      <td>-0.08</td>\n","      <td>0.08</td>\n","      <td>-0.18</td>\n","      <td>0.22</td>\n","      <td>119</td>\n","      <td>0.02</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-0.03</td>\n","      <td>-0.05</td>\n","      <td>-0.30</td>\n","      <td>0.09</td>\n","      <td>0.16</td>\n","      <td>0.20</td>\n","      <td>-0.07</td>\n","      <td>0.08</td>\n","      <td>-0.18</td>\n","      <td>0.26</td>\n","      <td>139</td>\n","      <td>0.02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      0     1     2    3     4  ...     7     8     9  centroid  pt2centroid\n","0 -0.02 -0.06 -0.15 0.05  0.09  ...  0.09 -0.13  0.18        40         0.01\n","1  0.00  0.01 -0.00 0.01 -0.03  ... -0.00  0.02 -0.00       109         0.01\n","2  0.00 -0.01  0.06 0.02 -0.07  ...  0.01 -0.00 -0.05       132         0.02\n","3 -0.04 -0.07 -0.19 0.09  0.11  ...  0.08 -0.18  0.22       119         0.02\n","4 -0.03 -0.05 -0.30 0.09  0.16  ...  0.08 -0.18  0.26       139         0.02\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"m6kE9uVnXjy4"},"source":["## Inspect Clustering Result"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"13TnsPz23xOU"},"source":["Inspect the chocolates in different clusters by changing the parameter `clusterNumber`\n","in the next cell and running the cell. Consider these questions as you inspect the clusters:\n","\n","* Are the clusters meaningful?\n","* Is the clustering result better with a manual similarity measure (see your previous Colab) or a supervised similarity measure?\n","* Does changing the number of clusters make the clusters more or less meaningful?\n","\n","For context, on the page [Supervised Similarity Measure](https://developers.google.com/machine-learning/clustering/similarity/supervised-similarity), read the table \"*Comparison of Manual and Supervised Measures*\". Then click the next cell for the discussion."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"NHWgGmpyux39","colab":{"base_uri":"https://localhost:8080/","height":297},"outputId":"39a5145f-be3f-40ae-ec60-2acbf0528b61","executionInfo":{"status":"ok","timestamp":1592216469563,"user_tz":-60,"elapsed":906,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["clusterNumber = 100 #@param\n","choc_data.loc[choc_embed['centroid']==clusterNumber,:]"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>maker</th>\n","      <th>specific_origin</th>\n","      <th>cocoa_percent</th>\n","      <th>maker_location</th>\n","      <th>rating</th>\n","      <th>bean_type</th>\n","      <th>broad_origin</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>256</th>\n","      <td>Brasstown aka It's Chocolate</td>\n","      <td>Chuao</td>\n","      <td>70.00</td>\n","      <td>U.S.A.</td>\n","      <td>4.00</td>\n","      <td>Trinitario</td>\n","      <td>Venezuela</td>\n","    </tr>\n","    <tr>\n","      <th>505</th>\n","      <td>Danta</td>\n","      <td>Las Acacias E</td>\n","      <td>75.00</td>\n","      <td>Guatemala</td>\n","      <td>3.00</td>\n","      <td>Criollo</td>\n","      <td>Guatemala</td>\n","    </tr>\n","    <tr>\n","      <th>828</th>\n","      <td>Hotel Chocolat</td>\n","      <td>Island Growers,2012,120hr c</td>\n","      <td>100.00</td>\n","      <td>England</td>\n","      <td>1.75</td>\n","      <td>Trinitario</td>\n","      <td>St Lucia</td>\n","    </tr>\n","    <tr>\n","      <th>901</th>\n","      <td>Kiskadee</td>\n","      <td>La Red,Guanconjeco</td>\n","      <td>60.00</td>\n","      <td>U.S.A.</td>\n","      <td>3.00</td>\n","      <td>Trinitario</td>\n","      <td>Dominican Republic</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>Letterpress</td>\n","      <td>San Juan Estate,Gran Couva</td>\n","      <td>70.00</td>\n","      <td>U.S.A.</td>\n","      <td>3.50</td>\n","      <td>Trinitario</td>\n","      <td>Trinidad</td>\n","    </tr>\n","    <tr>\n","      <th>967</th>\n","      <td>Levy</td>\n","      <td>Sambirano</td>\n","      <td>71.00</td>\n","      <td>Finland</td>\n","      <td>3.50</td>\n","      <td>Criollo</td>\n","      <td>Madagascar</td>\n","    </tr>\n","    <tr>\n","      <th>1187</th>\n","      <td>Noble Bean aka Jerjobo</td>\n","      <td>Maranon Canyon</td>\n","      <td>75.00</td>\n","      <td>U.S.A.</td>\n","      <td>3.25</td>\n","      <td>Forastero (Nacional)</td>\n","      <td>Peru</td>\n","    </tr>\n","    <tr>\n","      <th>1734</th>\n","      <td>Whittakers</td>\n","      <td>Ghana</td>\n","      <td>72.00</td>\n","      <td>New Zealand</td>\n","      <td>2.50</td>\n","      <td>Forastero</td>\n","      <td>Ghana</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                             maker  ...        broad_origin\n","256   Brasstown aka It's Chocolate  ...           Venezuela\n","505                          Danta  ...           Guatemala\n","828                 Hotel Chocolat  ...            St Lucia\n","901                       Kiskadee  ...  Dominican Republic\n","962                    Letterpress  ...            Trinidad\n","967                           Levy  ...          Madagascar\n","1187        Noble Bean aka Jerjobo  ...                Peru\n","1734                    Whittakers  ...               Ghana\n","\n","[8 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"MJtuP9w5jJHq"},"source":["### Solution: Discussion of clustering results\n","Click below for the answer."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"gxiPD8g_jShi"},"source":["**Discussion**:\n","\n","**Q. Are the clusters meaningful?** \n","\n","The clusters become more meaningful when you increase the number of clusters above approximately 100. Below ~100 clusters, dissimilar chocolates tend to be grouped together. Specifically, the grouping of numeric features is more meaningful than the categorical features. A possible cause is that the DNN isn't accurately encoding the categorical features because ~1800 examples isn't enough data to encode each of the dozens of values that categorical features have.\n","\n","**Q. Is the clustering result better with a manual similarity measure or a supervised similarity measure?**\n","\n","The clusters are more meaningful for the manual similarity measure because you customized the measure to accurately capture similarity between chocolates. Manual design was possible because the dataset was not complex. In comparison, in your supervised similarity measure, you just threw your data into the DNN and relied on the DNN to encode the similarity. The disadvantage is that with such a small dataset, the DNN lacks the data to accurately encode similarity.\n","\n","**Q. Does changing the number of clusters make the clusters more or less meaningful?**\n","\n","Increasing the number of clusters makes the clusters more meaningful up to a limit, because dissimilar chocolates can be broken up into distinct clusters."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Z1eW0PlG57Zs"},"source":["# 5. Quality Metrics for Clusters\n","For the clusters, let's calculate the metrics discussed in [Interpret Results](https://developers.google.com/machine-learning/clustering/interpret). Read that course content before starting this code section.\n","\n","Run the next cell to set up functions."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"i9Y2H-nR56C3","colab":{}},"source":["#@title Run cell to setup functions { display-mode: \"form\" }\n","def clusterCardinality(df):\n","  k = np.max(df[\"centroid\"]) + 1\n","  if six.PY2:\n","    k = k.astype(int)\n","  print(\"Number of clusters:\"+str(k))\n","  clCard = np.zeros(k)\n","  for kk in range(k):\n","    clCard[kk] = np.sum(df[\"centroid\"]==kk)\n","  if six.PY2:\n","    clCard = clCard.astype(int)\n","  # print \"Cluster Cardinality:\"+str(clCard)\n","  plt.figure()\n","  plt.bar(range(k),clCard)\n","  plt.title('Cluster Cardinality')\n","  plt.xlabel('Cluster Number: '+str(0)+' to '+str(k-1))\n","  plt.ylabel('Points in Cluster')\n","  return clCard\n","\n","def clusterMagnitude(df):\n","  k = np.max(df[\"centroid\"]) + 1\n","  if six.PY2:\n","    k = k.astype(int)\n","  cl = np.zeros(k)\n","  clMag = np.zeros(k)\n","  for kk in range(k):\n","    idx = np.where(df[\"centroid\"]==kk)\n","    idx = idx[0]\n","    clMag[kk] = np.sum(df.loc[idx,\"pt2centroid\"])\n","  # print \"Cluster Magnitude:\",clMag #precision set using np pref\n","  plt.figure()\n","  plt.bar(range(k),clMag)\n","  plt.title('Cluster Magnitude')\n","  plt.xlabel('Cluster Number: '+str(0)+' to '+str(k-1))\n","  plt.ylabel('Total Point-to-Centroid Distance')\n","  return clMag\n","\n","def plotCardVsMag(clCard,clMag):\n","  plt.figure()\n","  plt.scatter(clCard,clMag)\n","  plt.xlim(xmin=0)\n","  plt.ylim(ymin=0)\n","  plt.title('Magnitude vs Cardinality')\n","  plt.ylabel('Magnitude')\n","  plt.xlabel('Cardinality')\n","\n","def clusterQualityMetrics(df):\n","  clCard = clusterCardinality(df)\n","  clMag = clusterMagnitude(df)\n","  plotCardVsMag(clCard,clMag)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"1nLYPlv4ejwD"},"source":["Calculate the following metrics by running the next cell:\n","\n","* cardinality of your clusters\n","* magnitude of your clusters\n","* cardinality vs magnitude\n","\n","Observe:\n","* The plots show that inspecting cluster metrics for many clusters isn't easy. However, the plots provide a general idea of the quality of the clustering. There are a number of outlying clusters.\n","* The correlation between cluster cardinality and cluster magnitude is lower than it was for a manual similarity measure. The lower correlation shows that some chocolates were harder to cluster, leading to large example-centroid distances.\n","\n","Experiment by changing these options and checking the result:\n","* dimensions of DNN's hidden layer\n","* autoencoder or predictor DNN\n","* number of clusters"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"3llKFtEpeiZ_","colab":{"base_uri":"https://localhost:8080/","height":868},"outputId":"e1e47a45-9f8b-4213-f688-0ff672a1aabe","executionInfo":{"status":"ok","timestamp":1592216510589,"user_tz":-60,"elapsed":1906,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["clusterQualityMetrics(choc_embed)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Number of clusters:160\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"SBa0k9KK2PAt"},"source":["## Find Optimum Number of Clusters\n","\n","Let's try finding the right number of clusters as you did in the previous programming exercise. For details, read \"*Step Three: Optimum Number of Clusters*\" on [Interpret Results](https://developers.google.com/machine-learning/clustering/interpret).\n","\n","Run the code below (it takes a while!). The resulting plot is uneven for low `k`, showing that the k-means has a difficult time clustering the data. As `k` increases past 100, the loss evens out, showing that k-means is effectively grouping the data into clusters."]},{"cell_type":"code","metadata":{"cellView":"form","colab_type":"code","id":"-df7QnPlhuIN","colab":{"base_uri":"https://localhost:8080/","height":635},"outputId":"1b3c41ee-886d-492a-e4e9-22a66f211089","executionInfo":{"status":"ok","timestamp":1592216613671,"user_tz":-60,"elapsed":97796,"user":{"displayName":"","photoUrl":"","userId":""}}},"source":["# Plot loss vs number of clusters\n","def lossVsClusters(kmin, kmax, kstep, choc_data):\n","  kmax += 1  # include kmax-th cluster in range\n","  kRange = range(kmin, kmax, kstep)\n","  loss = np.zeros(len(kRange))\n","  lossCtr = 0\n","  for kk in kRange:\n","    [choc_data, centroids] = kmeans(choc_data, kk, feature_cols, 0)\n","    loss[lossCtr] = np.sum(choc_data['pt2centroid'])\n","    lossCtr += 1\n","  plt.scatter(kRange, loss)\n","  plt.title('Loss vs Clusters Used')\n","  plt.xlabel('Number of clusters')\n","  plt.ylabel('Total Point-to-Centroid Distance')\n","\n","\n","kmin = 5  # @param\n","kmax = 200  # @param\n","kstep = 10  # @param\n","lossVsClusters(kmin, kmax, kstep, choc_embed)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["k-means converged for 5 clusters after 19 iterations!\n","k-means converged for 15 clusters after 49 iterations!\n","k-means converged for 25 clusters after 41 iterations!\n","k-means converged for 35 clusters after 39 iterations!\n","k-means converged for 45 clusters after 47 iterations!\n","k-means converged for 55 clusters after 19 iterations!\n","k-means converged for 65 clusters after 22 iterations!\n","k-means converged for 75 clusters after 33 iterations!\n","k-means converged for 85 clusters after 34 iterations!\n","k-means converged for 95 clusters after 18 iterations!\n","k-means converged for 105 clusters after 19 iterations!\n","k-means converged for 115 clusters after 14 iterations!\n","k-means converged for 125 clusters after 21 iterations!\n","k-means converged for 135 clusters after 16 iterations!\n","k-means converged for 145 clusters after 22 iterations!\n","k-means converged for 155 clusters after 17 iterations!\n","k-means converged for 165 clusters after 20 iterations!\n","k-means converged for 175 clusters after 12 iterations!\n","k-means converged for 185 clusters after 15 iterations!\n","k-means converged for 195 clusters after 12 iterations!\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"hK5iKbQ9k5EJ"},"source":["# Summary\n","\n","The codelab demonstrates these characteristics of a supervised similarity measure, described on the page [Supervised Similarity Measure](https://developers.google.com/machine-learning/clustering/similarity/supervised-similarity) in the table \"*Comparison of Manual and Supervised Measures*\":\n","\n","* **Eliminates redundant information in correlated features**. As discussed in this [section](#scrollTo=MJtuP9w5jJHq), the DNN eliminates redundant information. However, to prove this characteristic, you'd need to train the DNN on adequate data and then compare with the results of a manual similarity measure.\n","* **Does not provides insight into calculated similarities**. Because you do not know what the embeddings represent, you have no insight into the clustering result.\n","* **Suitable for large datasets with complex features**. Our dataset was too small to adequately train the DNN, demonstrating that DNNs need large datasets to train. The advantage is that you do not need to understand the input data. Since large datasets are not easy to understand, these two characteristics go hand-in-hand.\n","* **Not suitable for small datasets**. A small dataset does not have enough information to train the DNN."]}]}